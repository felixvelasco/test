/*
* generated by Xtext
*/
package com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.isb.bks.ivr.voice.dsl.services.VoiceDslGrammarAccess;

public class VoiceDslParser extends AbstractContentAssistParser {
	
	@Inject
	private VoiceDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr.internal.InternalVoiceDslParser createParser() {
		com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr.internal.InternalVoiceDslParser result = new com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr.internal.InternalVoiceDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGrammarAccess().getModeAlternatives_1_0(), "rule__Grammar__ModeAlternatives_1_0");
					put(grammarAccess.getConditionalAudioAccess().getAlternatives_1(), "rule__ConditionalAudio__Alternatives_1");
					put(grammarAccess.getInputElementAccess().getGroup(), "rule__InputElement__Group__0");
					put(grammarAccess.getGrammarAccess().getGroup(), "rule__Grammar__Group__0");
					put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
					put(grammarAccess.getConfigurationAccess().getGroup_2(), "rule__Configuration__Group_2__0");
					put(grammarAccess.getConfigurationAccess().getGroup_3(), "rule__Configuration__Group_3__0");
					put(grammarAccess.getConfigurationAccess().getGroup_4(), "rule__Configuration__Group_4__0");
					put(grammarAccess.getAudiosAccess().getGroup_0(), "rule__Audios__Group_0__0");
					put(grammarAccess.getAudiosAccess().getGroup_3(), "rule__Audios__Group_3__0");
					put(grammarAccess.getNoInputAccess().getGroup(), "rule__NoInput__Group__0");
					put(grammarAccess.getNoMatchAccess().getGroup(), "rule__NoMatch__Group__0");
					put(grammarAccess.getMatchAccess().getGroup(), "rule__Match__Group__0");
					put(grammarAccess.getInitialAccess().getGroup(), "rule__Initial__Group__0");
					put(grammarAccess.getSimpleAudioAccess().getGroup(), "rule__SimpleAudio__Group__0");
					put(grammarAccess.getSimpleAudioAccess().getGroup_4(), "rule__SimpleAudio__Group_4__0");
					put(grammarAccess.getConditionalAudioAccess().getGroup(), "rule__ConditionalAudio__Group__0");
					put(grammarAccess.getConditionalAudioAccess().getGroup_0(), "rule__ConditionalAudio__Group_0__0");
					put(grammarAccess.getConditionalAudioAccess().getGroup_1_1(), "rule__ConditionalAudio__Group_1_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getInputElementAccess().getConfigurationAssignment_0(), "rule__InputElement__ConfigurationAssignment_0");
					put(grammarAccess.getInputElementAccess().getGrammaticsAssignment_1(), "rule__InputElement__GrammaticsAssignment_1");
					put(grammarAccess.getInputElementAccess().getAudiosAssignment_2(), "rule__InputElement__AudiosAssignment_2");
					put(grammarAccess.getGrammarAccess().getModeAssignment_1(), "rule__Grammar__ModeAssignment_1");
					put(grammarAccess.getGrammarAccess().getBuiltinAssignment_2(), "rule__Grammar__BuiltinAssignment_2");
					put(grammarAccess.getGrammarAccess().getSrcAssignment_3(), "rule__Grammar__SrcAssignment_3");
					put(grammarAccess.getConfigurationAccess().getNameAssignment_1(), "rule__Configuration__NameAssignment_1");
					put(grammarAccess.getConfigurationAccess().getMaxNoInputAssignment_2_1(), "rule__Configuration__MaxNoInputAssignment_2_1");
					put(grammarAccess.getConfigurationAccess().getMaxNoMAtchAssignment_3_1(), "rule__Configuration__MaxNoMAtchAssignment_3_1");
					put(grammarAccess.getConfigurationAccess().getMaxAttemptsAssignment_4_1(), "rule__Configuration__MaxAttemptsAssignment_4_1");
					put(grammarAccess.getAudiosAccess().getInitialAssignment_0_2(), "rule__Audios__InitialAssignment_0_2");
					put(grammarAccess.getAudiosAccess().getNoMatchAssignment_1(), "rule__Audios__NoMatchAssignment_1");
					put(grammarAccess.getAudiosAccess().getNoInputAssignment_2(), "rule__Audios__NoInputAssignment_2");
					put(grammarAccess.getAudiosAccess().getMatchAssignment_3_0(), "rule__Audios__MatchAssignment_3_0");
					put(grammarAccess.getNoInputAccess().getAudioAssignment_2(), "rule__NoInput__AudioAssignment_2");
					put(grammarAccess.getNoMatchAccess().getAudioAssignment_2(), "rule__NoMatch__AudioAssignment_2");
					put(grammarAccess.getMatchAccess().getAudioAssignment_2(), "rule__Match__AudioAssignment_2");
					put(grammarAccess.getInitialAccess().getAudioAssignment_3(), "rule__Initial__AudioAssignment_3");
					put(grammarAccess.getSimpleAudioAccess().getDontBargeInAssignment_2(), "rule__SimpleAudio__DontBargeInAssignment_2");
					put(grammarAccess.getSimpleAudioAccess().getTtsAssignment_3(), "rule__SimpleAudio__TtsAssignment_3");
					put(grammarAccess.getSimpleAudioAccess().getSrcAssignment_4_1(), "rule__SimpleAudio__SrcAssignment_4_1");
					put(grammarAccess.getConditionalAudioAccess().getConditionAssignment_0_0(), "rule__ConditionalAudio__ConditionAssignment_0_0");
					put(grammarAccess.getConditionalAudioAccess().getAudioAssignment_1_0(), "rule__ConditionalAudio__AudioAssignment_1_0");
					put(grammarAccess.getConditionalAudioAccess().getAudioAssignment_1_1_1(), "rule__ConditionalAudio__AudioAssignment_1_1_1");
					put(grammarAccess.getConditionAccess().getCountAssignment_1(), "rule__Condition__CountAssignment_1");
					put(grammarAccess.getAudiosAccess().getUnorderedGroup(), "rule__Audios__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr.internal.InternalVoiceDslParser typedParser = (com.isb.bks.ivr.voice.dsl.ui.contentassist.antlr.internal.InternalVoiceDslParser) parser;
			typedParser.entryRuleInputElement();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public VoiceDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(VoiceDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
