/*
 * generated by Xtext
 */
package com.isb.bks.ivr.voice.dsl.ui.contentassist

import com.google.common.collect.Sets
import com.vectorsf.jvoice.prompt.model.voiceDsl.Audio
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class VoiceDslProposalProvider extends AbstractVoiceDslProposalProvider {

	static val OUTPUT_CONFIGURATION_KEYS = Sets.newHashSet("bargein");
	
	static val INPUT_CONFIGURATION_KEYS = Sets.newHashSet("maxNoInput", "maxNoMatch", "maxAttempts", "confidence", "bargein",
		"timeout", "interdigittimeout", "recordutterance");

	static val RECORD_CONFIGURATION_KEYS = Sets.newHashSet("beep", "dtmfterm", "maxtime", "finalsilence", "keep");
	
	override completeRecordConfiguration_ConfigValue(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		for (String keyword : RECORD_CONFIGURATION_KEYS) {
			acceptor.accept(createCompletionProposal(keyword, keyword, null, context));
		}		
		super.completeRecordConfiguration_ConfigValue(model, assignment, context, acceptor);	
	}
	
	override completeInputConfiguration_ConfigValue(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		for (String keyword : INPUT_CONFIGURATION_KEYS) {
			acceptor.accept(createCompletionProposal(keyword, keyword, null, context));
		}		
		super.completeInputConfiguration_ConfigValue(model, assignment, context, acceptor);	
	}

	override completeOutputConfiguration_ConfigValue(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		for (String keyword : OUTPUT_CONFIGURATION_KEYS) {
			acceptor.accept(createCompletionProposal(keyword, keyword, null, context));
		}		
		super.completeOutputConfiguration_ConfigValue(model, assignment, context, acceptor);	
	}

	def completeSimpleAudio_Src(Audio audio, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		var uri = audio.eResource.URI
		var project = ResourcesPlugin.workspace.root.findMember(uri.toPlatformString(true)).project;
		var audiosFolder = project.getFolder("/src/main/resources/audios")
		if (audiosFolder.exists)
		{
			for (file: audiosFolder.members)
			{
				var name = file.name;
				if (name.endsWith(".wav")) {
					var basename = name.substring(0, name.lastIndexOf('.'));
					acceptor.accept(createCompletionProposal('"' + basename + '"', basename, null, context));
				}
			}
		}

		super.completeSimpleAudio_Src(audio, assignment, context, acceptor);
	}
}
