/*
 * generated by Xtext
 */
package com.isb.bks.ivr.voice.dsl.validation;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.URI;
import org.eclipse.xtext.validation.Check;

import com.vectorsf.jvoice.model.base.BasePackage;
import com.vectorsf.jvoice.prompt.model.voiceDsl.Audio;
import com.vectorsf.jvoice.prompt.model.voiceDsl.Grammar;
import com.vectorsf.jvoice.prompt.model.voiceDsl.Grammars;
import com.vectorsf.jvoice.prompt.model.voiceDsl.Output;
import com.vectorsf.jvoice.prompt.model.voiceDsl.Outputs;
import com.vectorsf.jvoice.prompt.model.voiceDsl.VoiceDsl;
import com.vectorsf.jvoice.prompt.model.voiceDsl.VoiceDslPackage;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
public class VoiceDslJavaValidator extends com.isb.bks.ivr.voice.dsl.validation.AbstractVoiceDslJavaValidator {

	private static final List<String> GRAMMAR_EXTENSIONS = new ArrayList<String>();

	static {
		GRAMMAR_EXTENSIONS.add("grxml");
		GRAMMAR_EXTENSIONS.add("bnf");
		GRAMMAR_EXTENSIONS.add("gsl");
	}

	@Check
	public void checkAudioContainsProperSrc(Audio audio) {
		String src = audio.getSrc();
		if (src != null && src.indexOf("${") == -1) {
			URI uri = audio.eResource().getURI();
			File rawFile = null;
			if (uri.isPlatformResource()) {
				IPath rawPath = ResourcesPlugin.getWorkspace().getRoot().findMember(uri.toPlatformString(true))
						.getRawLocation();

				rawFile = rawPath.toFile();
			} else {
				rawFile = new File(uri.toFileString());
			}
			File projectFile = findProjectFile(rawFile);
			File audiosFolder = new File(projectFile, "src/main/resources/audios");
			String audioName = src + ".wav";
			File audioFile = new File(audiosFolder, audioName);

			if (!audioFile.exists()) {
				warning("Audio file not found", VoiceDslPackage.Literals.AUDIO__SRC);
			}
		}
	}

	@Check
	public void checkGrammarContainsProperSrc(Grammar grammar) {
		if (grammar.getSrc() != null) {
			String grammarSrc = grammar.getSrc();
			if (!grammarSrc.trim().startsWith("builtin:")) {
				// No builtin grammar. Validate if exists as a resource.
				// If a builtin grammar no validation is needed.
				URI uri = grammar.eResource().getURI();
				File rawFile = null;
				if (uri.isPlatformResource()) {
					IPath rawPath = ResourcesPlugin.getWorkspace().getRoot().findMember(uri.toPlatformString(true))
							.getRawLocation();

					rawFile = rawPath.toFile();
				} else {
					rawFile = new File(uri.toFileString());
				}
				File projectFile = findProjectFile(rawFile);
				File grammarsFolder = new File(projectFile, "src/main/resources/grammars");
				boolean found = false;
				for (String extension : GRAMMAR_EXTENSIONS) {
					String fileGrammarName = grammar.getSrc() + "." + extension;
					File audioFile = new File(grammarsFolder, fileGrammarName);
					if (audioFile.exists()) {
						found = true;
						break;
					}
				}
				if (!found) {
					error("Grammar file not found", VoiceDslPackage.Literals.GRAMMAR__SRC);
				}
			}
		}
	}

	@Check
	public void checkAtLeastOneGrammar(Grammars grammars) {
		if (grammars.getGrammatics().isEmpty()) {
			error("At least one grammar is needed.", VoiceDslPackage.Literals.GRAMMARS__GRAMMATICS);
		}
	}

	private File findProjectFile(File file) {
		if (file == null) {
			return null;
		}
		if (new File(file, "src/main/resources").exists()) {
			return file;
		}
		return findProjectFile(file.getParentFile());
	}

	@Check
	public void checkMenuOutputs(Outputs outputs) {
		if (outputs != null) {
			List<Output> outputList = outputs.getOutput();
			if (outputList == null || outputList.isEmpty()) {
				error("Menu must have one output at least.", VoiceDslPackage.Literals.OUTPUTS__OUTPUT);
			}
			if (outputList.size() > 1) {
				for (int i = 0; i < outputList.size() - 1; i++) {
					Output output1 = outputList.get(i);
					for (int j = i + 1; j < outputList.size(); j++) {
						Output output2 = outputList.get(j);

						if (output1.getName().equals(output2.getName())) {
							error("Duplicate Menu output name \"" + output1.getName() + "\".",
									VoiceDslPackage.Literals.OUTPUTS__OUTPUT, j);
						}
					}
				}
			}
		}
	}

	@Check
	public void checkNameDslLocutionState(VoiceDsl lstate) {
		URI uri = lstate.eResource().getURI();
		File rawFile = null;
		if (uri.isPlatformResource()) {
			IPath rawPath = ResourcesPlugin.getWorkspace().getRoot().findMember(uri.toPlatformString(true))
					.getRawLocation();

			rawFile = rawPath.toFile();
		} else {
			rawFile = new File(uri.toFileString());
		}

		String nameFile = rawFile.getName().substring(0, rawFile.getName().indexOf("."));

		String nameVoice = lstate.getName();
		if (!nameVoice.equals(nameFile)) {
			error("Name of Definition " + nameVoice + " is not the same than the name of the file " + nameFile
					+ ".voiceDsl.", BasePackage.Literals.NAMED_ELEMENT__NAME);
		}
	}

}
