/*
* generated by Xtext
*/
package com.isb.bks.ivr.voice.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class VoiceDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VoiceDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoiceDsl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputDslParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMenuDslParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPromptDslParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordDslParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cTypesAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTypesTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		
		//VoiceDsl:
		//
		//	InputDsl | MenuDsl | PromptDsl | RecordDsl | types+=Type*;
		public ParserRule getRule() { return rule; }

		//InputDsl | MenuDsl | PromptDsl | RecordDsl | types+=Type*
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputDsl
		public RuleCall getInputDslParserRuleCall_0() { return cInputDslParserRuleCall_0; }

		//MenuDsl
		public RuleCall getMenuDslParserRuleCall_1() { return cMenuDslParserRuleCall_1; }

		//PromptDsl
		public RuleCall getPromptDslParserRuleCall_2() { return cPromptDslParserRuleCall_2; }

		//RecordDsl
		public RuleCall getRecordDslParserRuleCall_3() { return cRecordDslParserRuleCall_3; }

		//types+=Type*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_4_0() { return cTypesTypeParserRuleCall_4_0; }
	}

	public class PromptDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PromptDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputnameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariablesParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_2_0 = (RuleCall)cConditionsAssignment_2_2.eContents().get(0);
		private final Assignment cAudiosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAudiosAudiosParserRuleCall_3_0 = (RuleCall)cAudiosAssignment_3.eContents().get(0);
		
		//PromptDsl:
		//
		//	"outputname" name=ID (properties+=Property* & variables=Variables? & conditions+=Condition*) audios=Audios;
		public ParserRule getRule() { return rule; }

		//"outputname" name=ID (properties+=Property* & variables=Variables? & conditions+=Condition*) audios=Audios
		public Group getGroup() { return cGroup; }

		//"outputname"
		public Keyword getOutputnameKeyword_0() { return cOutputnameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//properties+=Property* & variables=Variables? & conditions+=Condition*
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0_0() { return cPropertiesPropertyParserRuleCall_2_0_0; }

		//variables=Variables?
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_2_1_0() { return cVariablesVariablesParserRuleCall_2_1_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_2_2() { return cConditionsAssignment_2_2; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_2_0() { return cConditionsConditionParserRuleCall_2_2_0; }

		//audios=Audios
		public Assignment getAudiosAssignment_3() { return cAudiosAssignment_3; }

		//Audios
		public RuleCall getAudiosAudiosParserRuleCall_3_0() { return cAudiosAudiosParserRuleCall_3_0; }
	}

	public class MenuDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MenuDsl");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cMenunameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_0_2 = (UnorderedGroup)cGroup_0.eContents().get(2);
		private final Assignment cConfigurationAssignment_0_2_0 = (Assignment)cUnorderedGroup_0_2.eContents().get(0);
		private final RuleCall cConfigurationConfigurationParserRuleCall_0_2_0_0 = (RuleCall)cConfigurationAssignment_0_2_0.eContents().get(0);
		private final Assignment cGrammarsAssignment_0_2_1 = (Assignment)cUnorderedGroup_0_2.eContents().get(1);
		private final RuleCall cGrammarsGrammarsParserRuleCall_0_2_1_0 = (RuleCall)cGrammarsAssignment_0_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_0_2_2 = (Assignment)cUnorderedGroup_0_2.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_0_2_2_0 = (RuleCall)cPropertiesAssignment_0_2_2.eContents().get(0);
		private final Assignment cVariablesAssignment_0_2_3 = (Assignment)cUnorderedGroup_0_2.eContents().get(3);
		private final RuleCall cVariablesVariablesParserRuleCall_0_2_3_0 = (RuleCall)cVariablesAssignment_0_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_0_2_4 = (Assignment)cUnorderedGroup_0_2.eContents().get(4);
		private final RuleCall cConditionsConditionParserRuleCall_0_2_4_0 = (RuleCall)cConditionsAssignment_0_2_4.eContents().get(0);
		private final Assignment cAudiosAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cAudiosAudiosParserRuleCall_1_0 = (RuleCall)cAudiosAssignment_1.eContents().get(0);
		private final Assignment cOutputsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cOutputsOutputsParserRuleCall_2_0 = (RuleCall)cOutputsAssignment_2.eContents().get(0);
		
		//MenuDsl:
		//
		//	"menuname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
		//
		//	conditions+=Condition*) & audios=Audios & outputs=Outputs;
		public ParserRule getRule() { return rule; }

		//"menuname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
		//
		//conditions+=Condition*) & audios=Audios & outputs=Outputs
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"menuname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
		//
		//conditions+=Condition*)
		public Group getGroup_0() { return cGroup_0; }

		//"menuname"
		public Keyword getMenunameKeyword_0_0() { return cMenunameKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? & conditions+=Condition*
		public UnorderedGroup getUnorderedGroup_0_2() { return cUnorderedGroup_0_2; }

		//configuration=Configuration
		public Assignment getConfigurationAssignment_0_2_0() { return cConfigurationAssignment_0_2_0; }

		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_0_2_0_0() { return cConfigurationConfigurationParserRuleCall_0_2_0_0; }

		//grammars=Grammars
		public Assignment getGrammarsAssignment_0_2_1() { return cGrammarsAssignment_0_2_1; }

		//Grammars
		public RuleCall getGrammarsGrammarsParserRuleCall_0_2_1_0() { return cGrammarsGrammarsParserRuleCall_0_2_1_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_0_2_2() { return cPropertiesAssignment_0_2_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0_2_2_0() { return cPropertiesPropertyParserRuleCall_0_2_2_0; }

		//variables=Variables?
		public Assignment getVariablesAssignment_0_2_3() { return cVariablesAssignment_0_2_3; }

		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_0_2_3_0() { return cVariablesVariablesParserRuleCall_0_2_3_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_0_2_4() { return cConditionsAssignment_0_2_4; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_2_4_0() { return cConditionsConditionParserRuleCall_0_2_4_0; }

		//audios=Audios
		public Assignment getAudiosAssignment_1() { return cAudiosAssignment_1; }

		//Audios
		public RuleCall getAudiosAudiosParserRuleCall_1_0() { return cAudiosAudiosParserRuleCall_1_0; }

		//outputs=Outputs
		public Assignment getOutputsAssignment_2() { return cOutputsAssignment_2; }

		//Outputs
		public RuleCall getOutputsOutputsParserRuleCall_2_0() { return cOutputsOutputsParserRuleCall_2_0; }
	}

	public class InputDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputnameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cConfigurationAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cConfigurationConfigurationParserRuleCall_2_0_0 = (RuleCall)cConfigurationAssignment_2_0.eContents().get(0);
		private final Assignment cGrammarsAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cGrammarsGrammarsParserRuleCall_2_1_0 = (RuleCall)cGrammarsAssignment_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_2_0 = (RuleCall)cPropertiesAssignment_2_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cVariablesVariablesParserRuleCall_2_3_0 = (RuleCall)cVariablesAssignment_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cConditionsConditionParserRuleCall_2_4_0 = (RuleCall)cConditionsAssignment_2_4.eContents().get(0);
		private final Assignment cAudiosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAudiosAudiosParserRuleCall_3_0 = (RuleCall)cAudiosAssignment_3.eContents().get(0);
		
		//InputDsl:
		//
		//	"inputname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
		//
		//	conditions+=Condition*) audios=Audios;
		public ParserRule getRule() { return rule; }

		//"inputname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
		//
		//conditions+=Condition*) audios=Audios
		public Group getGroup() { return cGroup; }

		//"inputname"
		public Keyword getInputnameKeyword_0() { return cInputnameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? & conditions+=Condition*
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//configuration=Configuration
		public Assignment getConfigurationAssignment_2_0() { return cConfigurationAssignment_2_0; }

		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_2_0_0() { return cConfigurationConfigurationParserRuleCall_2_0_0; }

		//grammars=Grammars
		public Assignment getGrammarsAssignment_2_1() { return cGrammarsAssignment_2_1; }

		//Grammars
		public RuleCall getGrammarsGrammarsParserRuleCall_2_1_0() { return cGrammarsGrammarsParserRuleCall_2_1_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2_2() { return cPropertiesAssignment_2_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_2_0() { return cPropertiesPropertyParserRuleCall_2_2_0; }

		//variables=Variables?
		public Assignment getVariablesAssignment_2_3() { return cVariablesAssignment_2_3; }

		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_2_3_0() { return cVariablesVariablesParserRuleCall_2_3_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_2_4() { return cConditionsAssignment_2_4; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_4_0() { return cConditionsConditionParserRuleCall_2_4_0; }

		//audios=Audios
		public Assignment getAudiosAssignment_3() { return cAudiosAssignment_3; }

		//Audios
		public RuleCall getAudiosAudiosParserRuleCall_3_0() { return cAudiosAudiosParserRuleCall_3_0; }
	}

	public class RecordDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordnameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cConfigurationAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cConfigurationConfigurationParserRuleCall_2_0_0 = (RuleCall)cConfigurationAssignment_2_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cVariablesVariablesParserRuleCall_2_2_0 = (RuleCall)cVariablesAssignment_2_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cConditionsConditionParserRuleCall_2_3_0 = (RuleCall)cConditionsAssignment_2_3.eContents().get(0);
		private final Assignment cAudiosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAudiosAudiosParserRuleCall_3_0 = (RuleCall)cAudiosAssignment_3.eContents().get(0);
		
		//RecordDsl:
		//
		//	"recordname" name=ID (configuration=Configuration & properties+=Property* & variables=Variables? &
		//
		//	conditions+=Condition*) audios=Audios;
		public ParserRule getRule() { return rule; }

		//"recordname" name=ID (configuration=Configuration & properties+=Property* & variables=Variables? &
		//
		//conditions+=Condition*) audios=Audios
		public Group getGroup() { return cGroup; }

		//"recordname"
		public Keyword getRecordnameKeyword_0() { return cRecordnameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//configuration=Configuration & properties+=Property* & variables=Variables? & conditions+=Condition*
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//configuration=Configuration
		public Assignment getConfigurationAssignment_2_0() { return cConfigurationAssignment_2_0; }

		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_2_0_0() { return cConfigurationConfigurationParserRuleCall_2_0_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_1_0() { return cPropertiesPropertyParserRuleCall_2_1_0; }

		//variables=Variables?
		public Assignment getVariablesAssignment_2_2() { return cVariablesAssignment_2_2; }

		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_2_2_0() { return cVariablesVariablesParserRuleCall_2_2_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_2_3() { return cConditionsAssignment_2_3; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_3_0() { return cConditionsConditionParserRuleCall_2_3_0; }

		//audios=Audios
		public Assignment getAudiosAssignment_3() { return cAudiosAssignment_3; }

		//Audios
		public RuleCall getAudiosAudiosParserRuleCall_3_0() { return cAudiosAudiosParserRuleCall_3_0; }
	}

	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariablesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variables:
		//
		//	{Variables} "variables" "{" variable+=Variable* "}";
		public ParserRule getRule() { return rule; }

		//{Variables} "variables" "{" variable+=Variable* "}"
		public Group getGroup() { return cGroup; }

		//{Variables}
		public Action getVariablesAction_0() { return cVariablesAction_0; }

		//"variables"
		public Keyword getVariablesKeyword_1() { return cVariablesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variable+=Variable*
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExternalVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExternalVarIDTerminalRuleCall_2_0 = (RuleCall)cExternalVarAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodIDTerminalRuleCall_4_0 = (RuleCall)cMethodAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Variable:
		//
		//	name=ID "=" externalVar=ID "." method=ID "()" ";";
		public ParserRule getRule() { return rule; }

		//name=ID "=" externalVar=ID "." method=ID "()" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//externalVar=ID
		public Assignment getExternalVarAssignment_2() { return cExternalVarAssignment_2; }

		//ID
		public RuleCall getExternalVarIDTerminalRuleCall_2_0() { return cExternalVarIDTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//method=ID
		public Assignment getMethodAssignment_4() { return cMethodAssignment_4; }

		//ID
		public RuleCall getMethodIDTerminalRuleCall_4_0() { return cMethodIDTerminalRuleCall_4_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_5() { return cLeftParenthesisRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class GrammarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grammars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGrammarsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrammarsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGrammaticsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGrammaticsGrammarParserRuleCall_3_0 = (RuleCall)cGrammaticsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Grammars:
		//
		//	{Grammars} "grammars" "{" grammatics+=Grammar* "}";
		public ParserRule getRule() { return rule; }

		//{Grammars} "grammars" "{" grammatics+=Grammar* "}"
		public Group getGroup() { return cGroup; }

		//{Grammars}
		public Action getGrammarsAction_0() { return cGrammarsAction_0; }

		//"grammars"
		public Keyword getGrammarsKeyword_1() { return cGrammarsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//grammatics+=Grammar*
		public Assignment getGrammaticsAssignment_3() { return cGrammaticsAssignment_3; }

		//Grammar
		public RuleCall getGrammaticsGrammarParserRuleCall_3_0() { return cGrammaticsGrammarParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AudiosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Audios");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cAudiosKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cMainKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cMainAudiosAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cMainAudiosConditionalAudioParserRuleCall_0_2_2_0 = (RuleCall)cMainAudiosAssignment_0_2_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cMatchKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMatchAudiosAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMatchAudiosConditionalAudioParserRuleCall_1_2_0 = (RuleCall)cMatchAudiosAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cNomatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNoMatchAudiosAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNoMatchAudiosConditionalAudioParserRuleCall_2_2_0 = (RuleCall)cNoMatchAudiosAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cNoinputKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cNoInputAudiosAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cNoInputAudiosConditionalAudioParserRuleCall_3_0_2_0 = (RuleCall)cNoInputAudiosAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Audios:
		//
		//	"audios" "{" ("main" ":" mainAudios+=ConditionalAudio+)? & ("match" ":" matchAudios+=ConditionalAudio+)? & ("nomatch"
		//
		//	":" noMatchAudios+=ConditionalAudio+)? & ("noinput" ":" noInputAudios+=ConditionalAudio+)? "}";
		public ParserRule getRule() { return rule; }

		//"audios" "{" ("main" ":" mainAudios+=ConditionalAudio+)? & ("match" ":" matchAudios+=ConditionalAudio+)? & ("nomatch"
		//
		//":" noMatchAudios+=ConditionalAudio+)? & ("noinput" ":" noInputAudios+=ConditionalAudio+)? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"audios" "{" ("main" ":" mainAudios+=ConditionalAudio+)?
		public Group getGroup_0() { return cGroup_0; }

		//"audios"
		public Keyword getAudiosKeyword_0_0() { return cAudiosKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//("main" ":" mainAudios+=ConditionalAudio+)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"main"
		public Keyword getMainKeyword_0_2_0() { return cMainKeyword_0_2_0; }

		//":"
		public Keyword getColonKeyword_0_2_1() { return cColonKeyword_0_2_1; }

		//mainAudios+=ConditionalAudio+
		public Assignment getMainAudiosAssignment_0_2_2() { return cMainAudiosAssignment_0_2_2; }

		//ConditionalAudio
		public RuleCall getMainAudiosConditionalAudioParserRuleCall_0_2_2_0() { return cMainAudiosConditionalAudioParserRuleCall_0_2_2_0; }

		//("match" ":" matchAudios+=ConditionalAudio+)?
		public Group getGroup_1() { return cGroup_1; }

		//"match"
		public Keyword getMatchKeyword_1_0() { return cMatchKeyword_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//matchAudios+=ConditionalAudio+
		public Assignment getMatchAudiosAssignment_1_2() { return cMatchAudiosAssignment_1_2; }

		//ConditionalAudio
		public RuleCall getMatchAudiosConditionalAudioParserRuleCall_1_2_0() { return cMatchAudiosConditionalAudioParserRuleCall_1_2_0; }

		//("nomatch" ":" noMatchAudios+=ConditionalAudio+)?
		public Group getGroup_2() { return cGroup_2; }

		//"nomatch"
		public Keyword getNomatchKeyword_2_0() { return cNomatchKeyword_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//noMatchAudios+=ConditionalAudio+
		public Assignment getNoMatchAudiosAssignment_2_2() { return cNoMatchAudiosAssignment_2_2; }

		//ConditionalAudio
		public RuleCall getNoMatchAudiosConditionalAudioParserRuleCall_2_2_0() { return cNoMatchAudiosConditionalAudioParserRuleCall_2_2_0; }

		//("noinput" ":" noInputAudios+=ConditionalAudio+)? "}"
		public Group getGroup_3() { return cGroup_3; }

		//("noinput" ":" noInputAudios+=ConditionalAudio+)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"noinput"
		public Keyword getNoinputKeyword_3_0_0() { return cNoinputKeyword_3_0_0; }

		//":"
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }

		//noInputAudios+=ConditionalAudio+
		public Assignment getNoInputAudiosAssignment_3_0_2() { return cNoInputAudiosAssignment_3_0_2; }

		//ConditionalAudio
		public RuleCall getNoInputAudiosConditionalAudioParserRuleCall_3_0_2_0() { return cNoInputAudiosConditionalAudioParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigValueConfigValueParserRuleCall_3_0 = (RuleCall)cConfigValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Configuration:
		//
		//	{Configuration} "configuration" "{" configValue+=ConfigValue* "}";
		public ParserRule getRule() { return rule; }

		//{Configuration} "configuration" "{" configValue+=ConfigValue* "}"
		public Group getGroup() { return cGroup; }

		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }

		//"configuration"
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//configValue+=ConfigValue*
		public Assignment getConfigValueAssignment_3() { return cConfigValueAssignment_3; }

		//ConfigValue
		public RuleCall getConfigValueConfigValueParserRuleCall_3_0() { return cConfigValueConfigValueParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConfigValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueConfigValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConfigValue:
		//
		//	name=ID value=ConfigValueValue;
		public ParserRule getRule() { return rule; }

		//name=ID value=ConfigValueValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//value=ConfigValueValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ConfigValueValue
		public RuleCall getValueConfigValueValueParserRuleCall_1_0() { return cValueConfigValueValueParserRuleCall_1_0; }
	}

	public class ConfigValueValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigValueValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cMsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ConfigValueValue:
		//
		//	INT "ms"? | FLOAT | "true" | "false";
		public ParserRule getRule() { return rule; }

		//INT "ms"? | FLOAT | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "ms"?
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"ms"?
		public Keyword getMsKeyword_0_1() { return cMsKeyword_0_1; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }
	}

	public class GrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModeAlternatives_0_0 = (Alternatives)cModeAssignment_0.eContents().get(0);
		private final Keyword cModeVoiceKeyword_0_0_0 = (Keyword)cModeAlternatives_0_0.eContents().get(0);
		private final Keyword cModeDtmfKeyword_0_0_1 = (Keyword)cModeAlternatives_0_0.eContents().get(1);
		private final Keyword cModeVoicedtmfKeyword_0_0_2 = (Keyword)cModeAlternatives_0_0.eContents().get(2);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExprExprKeyword_1_0 = (Keyword)cExprAssignment_1.eContents().get(0);
		private final Assignment cSrcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrcSTRINGTerminalRuleCall_2_0 = (RuleCall)cSrcAssignment_2.eContents().get(0);
		
		//Grammar:
		//
		//	mode=("voice" | "dtmf" | "voicedtmf") expr?="expr"? src=STRING;
		public ParserRule getRule() { return rule; }

		//mode=("voice" | "dtmf" | "voicedtmf") expr?="expr"? src=STRING
		public Group getGroup() { return cGroup; }

		//mode=("voice" | "dtmf" | "voicedtmf")
		public Assignment getModeAssignment_0() { return cModeAssignment_0; }

		//"voice" | "dtmf" | "voicedtmf"
		public Alternatives getModeAlternatives_0_0() { return cModeAlternatives_0_0; }

		//"voice"
		public Keyword getModeVoiceKeyword_0_0_0() { return cModeVoiceKeyword_0_0_0; }

		//"dtmf"
		public Keyword getModeDtmfKeyword_0_0_1() { return cModeDtmfKeyword_0_0_1; }

		//"voicedtmf"
		public Keyword getModeVoicedtmfKeyword_0_0_2() { return cModeVoicedtmfKeyword_0_0_2; }

		//expr?="expr"?
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//"expr"
		public Keyword getExprExprKeyword_1_0() { return cExprExprKeyword_1_0; }

		//src=STRING
		public Assignment getSrcAssignment_2() { return cSrcAssignment_2; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_2_0() { return cSrcSTRINGTerminalRuleCall_2_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Property:
		//
		//	"property" name=QualifiedName value=STRING;
		public ParserRule getRule() { return rule; }

		//"property" name=QualifiedName value=STRING
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionINTTerminalRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//Condition:
		//
		//	{Condition} "condition" name=ID condition=INT;
		public ParserRule getRule() { return rule; }

		//{Condition} "condition" name=ID condition=INT
		public Group getGroup() { return cGroup; }

		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }

		//"condition"
		public Keyword getConditionKeyword_1() { return cConditionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//condition=INT
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//INT
		public RuleCall getConditionINTTerminalRuleCall_3_0() { return cConditionINTTerminalRuleCall_3_0; }
	}

	public class OutputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputOutputParserRuleCall_2_0 = (RuleCall)cOutputAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Outputs:
		//
		//	"outputs" "{" output+=Output+ "}";
		public ParserRule getRule() { return rule; }

		//"outputs" "{" output+=Output+ "}"
		public Group getGroup() { return cGroup; }

		//"outputs"
		public Keyword getOutputsKeyword_0() { return cOutputsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//output+=Output+
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }

		//Output
		public RuleCall getOutputOutputParserRuleCall_2_0() { return cOutputOutputParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputValueOutputValueParserRuleCall_2_0 = (RuleCall)cOutputValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutputValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputValueOutputValueParserRuleCall_3_1_0 = (RuleCall)cOutputValueAssignment_3_1.eContents().get(0);
		
		//Output:
		//
		//	name=ID ":" outputValue+=OutputValue ("," outputValue+=OutputValue)*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" outputValue+=OutputValue ("," outputValue+=OutputValue)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//outputValue+=OutputValue
		public Assignment getOutputValueAssignment_2() { return cOutputValueAssignment_2; }

		//OutputValue
		public RuleCall getOutputValueOutputValueParserRuleCall_2_0() { return cOutputValueOutputValueParserRuleCall_2_0; }

		//("," outputValue+=OutputValue)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//outputValue+=OutputValue
		public Assignment getOutputValueAssignment_3_1() { return cOutputValueAssignment_3_1; }

		//OutputValue
		public RuleCall getOutputValueOutputValueParserRuleCall_3_1_0() { return cOutputValueOutputValueParserRuleCall_3_1_0; }
	}

	public class OutputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueAsteriskKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//OutputValue:
		//
		//	value=STRING | value="*";
		public ParserRule getRule() { return rule; }

		//value=STRING | value="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//value="*"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"*"
		public Keyword getValueAsteriskKeyword_1_0() { return cValueAsteriskKeyword_1_0; }
	}

	public class SimpleAudioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAudio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAudioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cSrcKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSrcAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSrcSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cSrcAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cWordingKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cTtsAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cTtsSTRINGTerminalRuleCall_2_1_0_1_0 = (RuleCall)cTtsAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cAsKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cInterpretationAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cInterpretationInterpretationEnumRuleCall_2_1_1_1_0 = (RuleCall)cInterpretationAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_2 = (Group)cGroup_2_1_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1_1_2_1 = (Assignment)cGroup_2_1_1_2.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_2_1_1_2_1_0 = (RuleCall)cFormatAssignment_2_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_1_2_2 = (Keyword)cGroup_2_1_1_2.eContents().get(2);
		private final Assignment cTtsAssignment_2_1_1_3 = (Assignment)cGroup_2_1_1.eContents().get(3);
		private final RuleCall cTtsSTRINGTerminalRuleCall_2_1_1_3_0 = (RuleCall)cTtsAssignment_2_1_1_3.eContents().get(0);
		
		//SimpleAudio returns Audio:
		//
		//	{Audio} "say" (("src" src=STRING)? ("wording" tts=STRING | "as" interpretation=Interpretation ("(" format=STRING
		//
		//	")")? tts=STRING)?);
		public ParserRule getRule() { return rule; }

		//{Audio} "say" (("src" src=STRING)? ("wording" tts=STRING | "as" interpretation=Interpretation ("(" format=STRING ")")?
		//
		//tts=STRING)?)
		public Group getGroup() { return cGroup; }

		//{Audio}
		public Action getAudioAction_0() { return cAudioAction_0; }

		//"say"
		public Keyword getSayKeyword_1() { return cSayKeyword_1; }

		//("src" src=STRING)? ("wording" tts=STRING | "as" interpretation=Interpretation ("(" format=STRING ")")? tts=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//("src" src=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"src"
		public Keyword getSrcKeyword_2_0_0() { return cSrcKeyword_2_0_0; }

		//src=STRING
		public Assignment getSrcAssignment_2_0_1() { return cSrcAssignment_2_0_1; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_2_0_1_0() { return cSrcSTRINGTerminalRuleCall_2_0_1_0; }

		//("wording" tts=STRING | "as" interpretation=Interpretation ("(" format=STRING ")")? tts=STRING)?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"wording" tts=STRING
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"wording"
		public Keyword getWordingKeyword_2_1_0_0() { return cWordingKeyword_2_1_0_0; }

		//tts=STRING
		public Assignment getTtsAssignment_2_1_0_1() { return cTtsAssignment_2_1_0_1; }

		//STRING
		public RuleCall getTtsSTRINGTerminalRuleCall_2_1_0_1_0() { return cTtsSTRINGTerminalRuleCall_2_1_0_1_0; }

		//"as" interpretation=Interpretation ("(" format=STRING ")")? tts=STRING
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"as"
		public Keyword getAsKeyword_2_1_1_0() { return cAsKeyword_2_1_1_0; }

		//interpretation=Interpretation
		public Assignment getInterpretationAssignment_2_1_1_1() { return cInterpretationAssignment_2_1_1_1; }

		//Interpretation
		public RuleCall getInterpretationInterpretationEnumRuleCall_2_1_1_1_0() { return cInterpretationInterpretationEnumRuleCall_2_1_1_1_0; }

		//("(" format=STRING ")")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_1_2_0() { return cLeftParenthesisKeyword_2_1_1_2_0; }

		//format=STRING
		public Assignment getFormatAssignment_2_1_1_2_1() { return cFormatAssignment_2_1_1_2_1; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_2_1_1_2_1_0() { return cFormatSTRINGTerminalRuleCall_2_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_1_2_2() { return cRightParenthesisKeyword_2_1_1_2_2; }

		//tts=STRING
		public Assignment getTtsAssignment_2_1_1_3() { return cTtsAssignment_2_1_1_3; }

		//STRING
		public RuleCall getTtsSTRINGTerminalRuleCall_2_1_1_3_0() { return cTtsSTRINGTerminalRuleCall_2_1_1_3_0; }
	}

	public class ConditionalAudioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalAudio");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConditionalAudioAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cWhenKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConditAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConditSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cConditAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cSimpleAAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cSimpleASimpleAudioParserRuleCall_0_6_0 = (RuleCall)cSimpleAAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final RuleCall cSimpleAudioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionalAudio returns Audio:
		//
		//	{ConditionalAudio} "when" "(" condit=STRING ")" "{" simpleA=SimpleAudio+ "}" | SimpleAudio;
		public ParserRule getRule() { return rule; }

		//{ConditionalAudio} "when" "(" condit=STRING ")" "{" simpleA=SimpleAudio+ "}" | SimpleAudio
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ConditionalAudio} "when" "(" condit=STRING ")" "{" simpleA=SimpleAudio+ "}"
		public Group getGroup_0() { return cGroup_0; }

		//{ConditionalAudio}
		public Action getConditionalAudioAction_0_0() { return cConditionalAudioAction_0_0; }

		//"when"
		public Keyword getWhenKeyword_0_1() { return cWhenKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//condit=STRING
		public Assignment getConditAssignment_0_3() { return cConditAssignment_0_3; }

		//STRING
		public RuleCall getConditSTRINGTerminalRuleCall_0_3_0() { return cConditSTRINGTerminalRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//simpleA=SimpleAudio+
		public Assignment getSimpleAAssignment_0_6() { return cSimpleAAssignment_0_6; }

		//SimpleAudio
		public RuleCall getSimpleASimpleAudioParserRuleCall_0_6_0() { return cSimpleASimpleAudioParserRuleCall_0_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }

		//SimpleAudio
		public RuleCall getSimpleAudioParserRuleCall_1() { return cSimpleAudioParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cClassAnnotationInfoAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cVariablesKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMembersAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_2_3_0 = (RuleCall)cMembersAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Type:
		//
		//	{Type} annotations+=XAnnotation* ({Class.annotationInfo=current} "variables" "{" members+=Member* "}");
		public ParserRule getRule() { return rule; }

		//{Type} annotations+=XAnnotation* ({Class.annotationInfo=current} "variables" "{" members+=Member* "}")
		public Group getGroup() { return cGroup; }

		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{Class.annotationInfo=current} "variables" "{" members+=Member* "}"
		public Group getGroup_2() { return cGroup_2; }

		//{Class.annotationInfo=current}
		public Action getClassAnnotationInfoAction_2_0() { return cClassAnnotationInfoAction_2_0; }

		//"variables"
		public Keyword getVariablesKeyword_2_1() { return cVariablesKeyword_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }

		//members+=Member*
		public Assignment getMembersAssignment_2_3() { return cMembersAssignment_2_3; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_3_0() { return cMembersMemberParserRuleCall_2_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cFieldAnnotationInfoAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_0_1_1_0 = (RuleCall)cNameAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_0_2_1_0 = (RuleCall)cInitialValueAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cFunctionAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cPublicKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Group cGroup_2_1_1_1_0 = (Group)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_1_1_1_0_0 = (Assignment)cGroup_2_1_1_1_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0_0_0 = (RuleCall)cReturnTypeAssignment_2_1_1_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1_1_0_1 = (Assignment)cGroup_2_1_1_1_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_1_1_0_1_0 = (RuleCall)cNameAssignment_2_1_1_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_1_2_0 = (RuleCall)cExpressionAssignment_2_1_2.eContents().get(0);
		
		//Member:
		//
		//	{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ID) ("="
		//
		//	initialValue=XExpression)? ";"? | {Function.annotationInfo=current} ("public" => (returnType=JvmTypeReference
		//
		//	name=ID)) expression=XBlockExpression);
		public ParserRule getRule() { return rule; }

		//{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ID) ("="
		//
		//initialValue=XExpression)? ";"? | {Function.annotationInfo=current} ("public" => (returnType=JvmTypeReference
		//
		//name=ID)) expression=XBlockExpression)
		public Group getGroup() { return cGroup; }

		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{Field.annotationInfo=current} (type=JvmTypeReference name=ID) ("=" initialValue=XExpression)? ";"? |
		//
		//{Function.annotationInfo=current} ("public" => (returnType=JvmTypeReference name=ID)) expression=XBlockExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//{Field.annotationInfo=current} (type=JvmTypeReference name=ID) ("=" initialValue=XExpression)? ";"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{Field.annotationInfo=current}
		public Action getFieldAnnotationInfoAction_2_0_0() { return cFieldAnnotationInfoAction_2_0_0; }

		//type=JvmTypeReference name=ID
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_0_1_1() { return cNameAssignment_2_0_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_1_1_0() { return cNameIDTerminalRuleCall_2_0_1_1_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_2_0() { return cEqualsSignKeyword_2_0_2_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_0_2_1() { return cInitialValueAssignment_2_0_2_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_0_2_1_0() { return cInitialValueXExpressionParserRuleCall_2_0_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_0_3() { return cSemicolonKeyword_2_0_3; }

		//{Function.annotationInfo=current} ("public" => (returnType=JvmTypeReference name=ID)) expression=XBlockExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{Function.annotationInfo=current}
		public Action getFunctionAnnotationInfoAction_2_1_0() { return cFunctionAnnotationInfoAction_2_1_0; }

		//"public" => (returnType=JvmTypeReference name=ID)
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"public"
		public Keyword getPublicKeyword_2_1_1_0() { return cPublicKeyword_2_1_1_0; }

		//=> (returnType=JvmTypeReference name=ID)
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//returnType=JvmTypeReference name=ID
		public Group getGroup_2_1_1_1_0() { return cGroup_2_1_1_1_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_2_1_1_1_0_0() { return cReturnTypeAssignment_2_1_1_1_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_1_1_1_0_1() { return cNameAssignment_2_1_1_1_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_1_1_0_1_0() { return cNameIDTerminalRuleCall_2_1_1_1_0_1_0; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2_1_2() { return cExpressionAssignment_2_1_2; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_1_2_0() { return cExpressionXBlockExpressionParserRuleCall_2_1_2_0; }
	}
	
	
	public class InterpretationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Interpretation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNumberNumberKeyword_0_0 = (Keyword)cNumberEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCurrencyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCurrencyCurrencyKeyword_2_0 = (Keyword)cCurrencyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDigitsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDigitsDigitsKeyword_4_0 = (Keyword)cDigitsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPhoneEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPhonePhoneKeyword_5_0 = (Keyword)cPhoneEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTimeTimeKeyword_6_0 = (Keyword)cTimeEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Interpretation:
		//
		//	number | boolean | currency | date | digits | phone | time;
		public EnumRule getRule() { return rule; }

		//number | boolean | currency | date | digits | phone | time
		public Alternatives getAlternatives() { return cAlternatives; }

		//number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_0() { return cNumberEnumLiteralDeclaration_0; }

		//"number"
		public Keyword getNumberNumberKeyword_0_0() { return cNumberNumberKeyword_0_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }

		//currency
		public EnumLiteralDeclaration getCurrencyEnumLiteralDeclaration_2() { return cCurrencyEnumLiteralDeclaration_2; }

		//"currency"
		public Keyword getCurrencyCurrencyKeyword_2_0() { return cCurrencyCurrencyKeyword_2_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }

		//"date"
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }

		//digits
		public EnumLiteralDeclaration getDigitsEnumLiteralDeclaration_4() { return cDigitsEnumLiteralDeclaration_4; }

		//"digits"
		public Keyword getDigitsDigitsKeyword_4_0() { return cDigitsDigitsKeyword_4_0; }

		//phone
		public EnumLiteralDeclaration getPhoneEnumLiteralDeclaration_5() { return cPhoneEnumLiteralDeclaration_5; }

		//"phone"
		public Keyword getPhonePhoneKeyword_5_0() { return cPhonePhoneKeyword_5_0; }

		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_6() { return cTimeEnumLiteralDeclaration_6; }

		//"time"
		public Keyword getTimeTimeKeyword_6_0() { return cTimeTimeKeyword_6_0; }
	}
	
	private VoiceDslElements pVoiceDsl;
	private PromptDslElements pPromptDsl;
	private MenuDslElements pMenuDsl;
	private InputDslElements pInputDsl;
	private RecordDslElements pRecordDsl;
	private VariablesElements pVariables;
	private VariableElements pVariable;
	private GrammarsElements pGrammars;
	private AudiosElements pAudios;
	private ConfigurationElements pConfiguration;
	private ConfigValueElements pConfigValue;
	private ConfigValueValueElements pConfigValueValue;
	private GrammarElements pGrammar;
	private PropertyElements pProperty;
	private ConditionElements pCondition;
	private OutputsElements pOutputs;
	private OutputElements pOutput;
	private OutputValueElements pOutputValue;
	private SimpleAudioElements pSimpleAudio;
	private InterpretationElements unknownRuleInterpretation;
	private ConditionalAudioElements pConditionalAudio;
	private TerminalRule tFLOAT;
	private TypeElements pType;
	private MemberElements pMember;
	
	private final Grammar grammar;

	private XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public VoiceDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.isb.bks.ivr.voice.dsl.VoiceDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//VoiceDsl:
	//
	//	InputDsl | MenuDsl | PromptDsl | RecordDsl | types+=Type*;
	public VoiceDslElements getVoiceDslAccess() {
		return (pVoiceDsl != null) ? pVoiceDsl : (pVoiceDsl = new VoiceDslElements());
	}
	
	public ParserRule getVoiceDslRule() {
		return getVoiceDslAccess().getRule();
	}

	//PromptDsl:
	//
	//	"outputname" name=ID (properties+=Property* & variables=Variables? & conditions+=Condition*) audios=Audios;
	public PromptDslElements getPromptDslAccess() {
		return (pPromptDsl != null) ? pPromptDsl : (pPromptDsl = new PromptDslElements());
	}
	
	public ParserRule getPromptDslRule() {
		return getPromptDslAccess().getRule();
	}

	//MenuDsl:
	//
	//	"menuname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
	//
	//	conditions+=Condition*) & audios=Audios & outputs=Outputs;
	public MenuDslElements getMenuDslAccess() {
		return (pMenuDsl != null) ? pMenuDsl : (pMenuDsl = new MenuDslElements());
	}
	
	public ParserRule getMenuDslRule() {
		return getMenuDslAccess().getRule();
	}

	//InputDsl:
	//
	//	"inputname" name=ID (configuration=Configuration & grammars=Grammars & properties+=Property* & variables=Variables? &
	//
	//	conditions+=Condition*) audios=Audios;
	public InputDslElements getInputDslAccess() {
		return (pInputDsl != null) ? pInputDsl : (pInputDsl = new InputDslElements());
	}
	
	public ParserRule getInputDslRule() {
		return getInputDslAccess().getRule();
	}

	//RecordDsl:
	//
	//	"recordname" name=ID (configuration=Configuration & properties+=Property* & variables=Variables? &
	//
	//	conditions+=Condition*) audios=Audios;
	public RecordDslElements getRecordDslAccess() {
		return (pRecordDsl != null) ? pRecordDsl : (pRecordDsl = new RecordDslElements());
	}
	
	public ParserRule getRecordDslRule() {
		return getRecordDslAccess().getRule();
	}

	//Variables:
	//
	//	{Variables} "variables" "{" variable+=Variable* "}";
	public VariablesElements getVariablesAccess() {
		return (pVariables != null) ? pVariables : (pVariables = new VariablesElements());
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}

	//Variable:
	//
	//	name=ID "=" externalVar=ID "." method=ID "()" ";";
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Grammars:
	//
	//	{Grammars} "grammars" "{" grammatics+=Grammar* "}";
	public GrammarsElements getGrammarsAccess() {
		return (pGrammars != null) ? pGrammars : (pGrammars = new GrammarsElements());
	}
	
	public ParserRule getGrammarsRule() {
		return getGrammarsAccess().getRule();
	}

	//Audios:
	//
	//	"audios" "{" ("main" ":" mainAudios+=ConditionalAudio+)? & ("match" ":" matchAudios+=ConditionalAudio+)? & ("nomatch"
	//
	//	":" noMatchAudios+=ConditionalAudio+)? & ("noinput" ":" noInputAudios+=ConditionalAudio+)? "}";
	public AudiosElements getAudiosAccess() {
		return (pAudios != null) ? pAudios : (pAudios = new AudiosElements());
	}
	
	public ParserRule getAudiosRule() {
		return getAudiosAccess().getRule();
	}

	//Configuration:
	//
	//	{Configuration} "configuration" "{" configValue+=ConfigValue* "}";
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//ConfigValue:
	//
	//	name=ID value=ConfigValueValue;
	public ConfigValueElements getConfigValueAccess() {
		return (pConfigValue != null) ? pConfigValue : (pConfigValue = new ConfigValueElements());
	}
	
	public ParserRule getConfigValueRule() {
		return getConfigValueAccess().getRule();
	}

	//ConfigValueValue:
	//
	//	INT "ms"? | FLOAT | "true" | "false";
	public ConfigValueValueElements getConfigValueValueAccess() {
		return (pConfigValueValue != null) ? pConfigValueValue : (pConfigValueValue = new ConfigValueValueElements());
	}
	
	public ParserRule getConfigValueValueRule() {
		return getConfigValueValueAccess().getRule();
	}

	//Grammar:
	//
	//	mode=("voice" | "dtmf" | "voicedtmf") expr?="expr"? src=STRING;
	public GrammarElements getGrammarAccess() {
		return (pGrammar != null) ? pGrammar : (pGrammar = new GrammarElements());
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}

	//Property:
	//
	//	"property" name=QualifiedName value=STRING;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Condition:
	//
	//	{Condition} "condition" name=ID condition=INT;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Outputs:
	//
	//	"outputs" "{" output+=Output+ "}";
	public OutputsElements getOutputsAccess() {
		return (pOutputs != null) ? pOutputs : (pOutputs = new OutputsElements());
	}
	
	public ParserRule getOutputsRule() {
		return getOutputsAccess().getRule();
	}

	//Output:
	//
	//	name=ID ":" outputValue+=OutputValue ("," outputValue+=OutputValue)*;
	public OutputElements getOutputAccess() {
		return (pOutput != null) ? pOutput : (pOutput = new OutputElements());
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//OutputValue:
	//
	//	value=STRING | value="*";
	public OutputValueElements getOutputValueAccess() {
		return (pOutputValue != null) ? pOutputValue : (pOutputValue = new OutputValueElements());
	}
	
	public ParserRule getOutputValueRule() {
		return getOutputValueAccess().getRule();
	}

	//SimpleAudio returns Audio:
	//
	//	{Audio} "say" (("src" src=STRING)? ("wording" tts=STRING | "as" interpretation=Interpretation ("(" format=STRING
	//
	//	")")? tts=STRING)?);
	public SimpleAudioElements getSimpleAudioAccess() {
		return (pSimpleAudio != null) ? pSimpleAudio : (pSimpleAudio = new SimpleAudioElements());
	}
	
	public ParserRule getSimpleAudioRule() {
		return getSimpleAudioAccess().getRule();
	}

	//enum Interpretation:
	//
	//	number | boolean | currency | date | digits | phone | time;
	public InterpretationElements getInterpretationAccess() {
		return (unknownRuleInterpretation != null) ? unknownRuleInterpretation : (unknownRuleInterpretation = new InterpretationElements());
	}
	
	public EnumRule getInterpretationRule() {
		return getInterpretationAccess().getRule();
	}

	//ConditionalAudio returns Audio:
	//
	//	{ConditionalAudio} "when" "(" condit=STRING ")" "{" simpleA=SimpleAudio+ "}" | SimpleAudio;
	public ConditionalAudioElements getConditionalAudioAccess() {
		return (pConditionalAudio != null) ? pConditionalAudio : (pConditionalAudio = new ConditionalAudioElements());
	}
	
	public ParserRule getConditionalAudioRule() {
		return getConditionalAudioAccess().getRule();
	}

	//terminal FLOAT:
	//
	//	INT "." INT;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//Type:
	//
	//	{Type} annotations+=XAnnotation* ({Class.annotationInfo=current} "variables" "{" members+=Member* "}");
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Member:
	//
	//	{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ID) ("="
	//
	//	initialValue=XExpression)? ";"? | {Function.annotationInfo=current} ("public" => (returnType=JvmTypeReference
	//
	//	name=ID)) expression=XBlockExpression);
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//XAnnotation:
	//
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//
	//	XAnnotation | XListLiteral | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//
	//	XAnnotationValueMemberFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueMemberFieldReference returns xbase::XExpression:
	//
	//	XAnnotationValueFieldReference ({xbase::XMemberFeatureCall.memberCallTarget=current} ("." | explicitStatic?="::")
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper])*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueMemberFieldReferenceElements getXAnnotationValueMemberFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueMemberFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueMemberFieldReferenceRule() {
		return getXAnnotationValueMemberFieldReferenceAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//
	//	{xbase::XFeatureCall} feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
	//
	//	")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbaseWithAnnotations.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbaseWithAnnotations.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbaseWithAnnotations.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbaseWithAnnotations.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbaseWithAnnotations.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbaseWithAnnotations.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//
	//StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbaseWithAnnotations.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbaseWithAnnotations.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbaseWithAnnotations.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
